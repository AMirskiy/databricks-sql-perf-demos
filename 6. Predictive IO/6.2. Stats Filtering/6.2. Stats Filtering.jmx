<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Stats Filtering" enabled="true">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HostName" elementType="Argument">
            <stringProp name="Argument.name">HostName</stringProp>
            <stringProp name="Argument.value">${__P(HostName,adb-2219810816778143.3.azuredatabricks.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HttpPathClassic" elementType="Argument">
            <stringProp name="Argument.name">HttpPathClassic</stringProp>
            <stringProp name="Argument.value">${__P(HttpPathClassic,/sql/1.0/warehouses/50657221ba4a92d4)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HttpPathServerless" elementType="Argument">
            <stringProp name="Argument.name">HttpPathServerless</stringProp>
            <stringProp name="Argument.value">${__P(HttpPathServerless,/sql/1.0/warehouses/bc92d47cc1b5ceab)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Catalog" elementType="Argument">
            <stringProp name="Argument.name">Catalog</stringProp>
            <stringProp name="Argument.value">${__P(Catalog,predictiveio)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Schema" elementType="Argument">
            <stringProp name="Argument.name">Schema</stringProp>
            <stringProp name="Argument.value">${__P(Schema,tpch)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UseCachedResult" elementType="Argument">
            <stringProp name="Argument.name">UseCachedResult</stringProp>
            <stringProp name="Argument.value">${__P(UseCachedResult,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfUsers" elementType="Argument">
            <stringProp name="Argument.name">NumberOfUsers</stringProp>
            <stringProp name="Argument.value">${__P(NumberOfUsers,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Duration" elementType="Argument">
            <stringProp name="Argument.name">Duration</stringProp>
            <stringProp name="Argument.value">${__P(Duration,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="token" elementType="Argument">
            <stringProp name="Argument.name">token</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__P(token,replace_with_actual_PAT)}</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DBSQL connection - Classic" enabled="true">
        <stringProp name="dataSource">dbsql1</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">jdbc:databricks://${HostName}:443/default;transportMode=http;ssl=1;AuthMech=3;httpPath=${HttpPathClassic};ConnCatalog=${Catalog};ConnSchema=${Schema};use_cached_result=${UseCachedResult};EnableArrow=0;</stringProp>
        <stringProp name="driver"></stringProp>
        <stringProp name="username">token</stringProp>
        <stringProp name="password">${token}</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DBSQL connection - Serverless" enabled="true">
        <stringProp name="dataSource">dbsql2</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">jdbc:databricks://${HostName}:443/default;transportMode=http;ssl=1;AuthMech=3;httpPath=${HttpPathServerless};ConnCatalog=${Catalog};ConnSchema=${Schema};use_cached_result=${UseCachedResult};EnableArrow=0;</stringProp>
        <stringProp name="driver"></stringProp>
        <stringProp name="username">token</stringProp>
        <stringProp name="password">${token}</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Preparation" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Create catalog" enabled="true">
          <stringProp name="dataSource">dbsql1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">CREATE CATALOG IF NOT EXISTS ${Catalog};
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Create schema" enabled="true">
          <stringProp name="dataSource">dbsql1</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">CREATE SCHEMA IF NOT EXISTS ${Catalog}.${Schema};

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Create test table" enabled="true">
          <stringProp name="dataSource">dbsql1</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">create or replace table ${Catalog}.${Schema}.lineitem_orders_stats_filtering
tblproperties (delta.targetFileSize = 67108864)
as 
select
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where 1=1
  and r_name=&apos;AFRICA&apos; and o_orderdate=&apos;1997-12-31&apos; and l_shipmode=&apos;MAIL&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
union all
select 
  r_name as region
  , lineitem.*
  , orders.*
  , customer.*
  , nation.*
  , region.*
from samples.tpch.orders 
  join samples.tpch.lineitem on o_orderkey=l_orderkey
  join samples.tpch.customer on c_custkey=o_custkey
  join samples.tpch.nation on c_nationkey=n_nationkey
  join samples.tpch.region on n_regionkey=r_regionkey
where r_name&lt;&gt;&apos;AFRICA&apos;
;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CACHE test table - Classic" enabled="true">
          <stringProp name="dataSource">dbsql1</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">CACHE SELECT * FROM ${Catalog}.${Schema}.lineitem_orders_stats_filtering;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CACHE test table - Serverless" enabled="true">
          <stringProp name="dataSource">dbsql2</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">CACHE SELECT * FROM ${Catalog}.${Schema}.lineitem_orders_stats_filtering;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Classic" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${NumberOfUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Sample query - Classic" enabled="true">
          <stringProp name="dataSource">dbsql1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select count(r_name) 
from ${Catalog}.${Schema}.lineitem_orders_stats_filtering 
where 1=1
  and r_name=&apos;AFRICA&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Get number of items ordered by customers in AFRICA</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Serverless" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${NumberOfUsers}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <stringProp name="ThreadGroup.duration">${Duration}</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Sample query - Stats Filtering" enabled="true">
          <stringProp name="dataSource">dbsql2</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select count(r_name) 
from ${Catalog}.${Schema}.lineitem_orders_stats_filtering 
where 1=1
  and r_name=&apos;AFRICA&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="TestPlan.comments">Get number of items ordered by customers in AFRICA</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="Cleanup" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Drop test dataset" enabled="true">
          <stringProp name="dataSource">dbsql1</stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="query">DROP CATALOG IF EXISTS ${Catalog} CASCADE;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
